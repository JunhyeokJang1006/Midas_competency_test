%% 개선된 상관분석 스크립트 생성기
%
% 목적: 분석된 척도 정보를 바탕으로 개선된 상관분석 스크립트 생성
%

clear; clc;

fprintf('개선된 상관분석 스크립트 생성 중...\n');

% 분석 결과 로드
matFile = 'D:\project\HR데이터\결과\성과종합점수&역검\question_scale_analysis_20250915_1634.mat';
if exist(matFile, 'file')
    load(matFile);
    fprintf('✓ 척도 분석 결과 로드 완료\n');
else
    fprintf('✗ 척도 분석 결과 파일을 찾을 수 없습니다\n');
    return;
end

% 문항별 권장 척도 매핑 생성
scaleMapping = containers.Map();

% 기본 척도 설정 (분석 결과 기반)
questionScales = struct();
questionScales.Q1 = [1, 4];    % 대부분 2~3점
questionScales.Q4 = [0, 4];    % 0~4점 (비정상이지만 실제 데이터)
questionScales.Q5 = [1, 7];    % 3~7점
questionScales.Q6 = [1, 7];    % 3~7점
questionScales.Q7 = [1, 7];    % 3~7점
questionScales.Q8 = [1, 7];    % 2~7점
questionScales.Q9 = [1, 7];    % 1~7점
questionScales.Q10 = [1, 7];   % 2~7점
questionScales.Q11 = [1, 7];   % 2~7점
questionScales.Q12 = [1, 7];   % 2~7점
questionScales.Q13 = [1, 7];   % 2~7점
questionScales.Q14 = [1, 7];   % 3~7점
questionScales.Q15 = [1, 7];   % 2~7점
questionScales.Q16 = [1, 7];   % 3~7점
questionScales.Q17 = [1, 7];   % 2~7점
questionScales.Q18 = [1, 7];   % 2~7점
questionScales.Q19 = [1, 4];   % 1~3점
questionScales.Q20 = [1, 4];   % 1~4점
questionScales.Q21 = [1, 7];   % 1~7점
questionScales.Q22 = [1, 5];   % 1~5점 (가장 일관된 척도)
questionScales.Q23 = [1, 7];   % 1~7점
questionScales.Q24 = [1, 7];   % 2~7점
questionScales.Q25 = [0, 7];   % 0~7점 (매우 불일치하므로 넓은 범위)
questionScales.Q26 = [1, 7];   % 3~7점
questionScales.Q27 = [0, 4];   % 0~4점 (비정상이지만 실제 데이터)
questionScales.Q31 = [1, 7];   % 1~7점
questionScales.Q32 = [1, 7];   % 1~7점
questionScales.Q33 = [1, 7];   % 2~7점
questionScales.Q34 = [1, 7];   % 1~7점
questionScales.Q35 = [1, 7];   % 1~7점
questionScales.Q36 = [1, 7];   % 1~7점
questionScales.Q37 = [1, 7];   % 1~7점
questionScales.Q38 = [1, 7];   % 1~7점
questionScales.Q39 = [1, 7];   % 2~7점
questionScales.Q40 = [1, 7];   % 1~7점
questionScales.Q41 = [0, 5];   % 0~5점
questionScales.Q42 = [1, 4];   % 1~3점
questionScales.Q44 = [0, 5];   % 0~5점
questionScales.Q45 = [1, 4];   % 1~3점
questionScales.Q51 = [0, 4];   % 0~4점
questionScales.Q52 = [1, 4];   % 3점 고정

% 기존 파일 읽기
originalFile = 'D:\project\HR데이터\matlab\문항기반\corr_item_vs_comp_score.m';
fid = fopen(originalFile, 'r', 'n', 'UTF-8');
originalContent = fread(fid, '*char')';
fclose(fid);

% 개선된 표준화 함수 생성
improvedFunction = generateImprovedFunction(questionScales);

% 기존 standardizeQuestionScales 함수 교체
startPattern = 'function standardizedData = standardizeQuestionScales';
endPattern = 'end';

% 함수 시작점 찾기
startIdx = strfind(originalContent, startPattern);
if ~isempty(startIdx)
    % 함수 끝점 찾기 (더 정확한 방법 필요)
    remainingContent = originalContent(startIdx(end):end);

    % "end" 키워드들을 찾고 함수의 끝을 결정
    endIdx = strfind(remainingContent, sprintf('\nend\n'));
    if ~isempty(endIdx)
        actualEndIdx = startIdx(end) + endIdx(1) + 3; % "\nend\n"의 길이

        % 기존 함수 제거하고 새 함수 삽입
        improvedContent = [originalContent(1:startIdx(end)-1), improvedFunction, originalContent(actualEndIdx+1:end)];
    else
        % 파일 끝에 추가
        improvedContent = [originalContent, sprintf('\n\n'), improvedFunction];
    end
else
    % 파일 끝에 추가
    improvedContent = [originalContent, sprintf('\n\n'), improvedFunction];
end

% 개선된 파일 저장
improvedFile = 'D:\project\HR데이터\matlab\문항기반\corr_item_vs_comp_score_v2.m';
fid = fopen(improvedFile, 'w', 'n', 'UTF-8');
fprintf(fid, '%s', improvedContent);
fclose(fid);

fprintf('✓ 개선된 상관분석 스크립트 생성 완료: %s\n', improvedFile);

function functionCode = generateImprovedFunction(questionScales)
    functionCode = sprintf(['function standardizedData = standardizeQuestionScales(questionData, questionNames, periodNum)\n'...
        '    %% 개선된 문항별 리커트 척도 표준화 함수\n'...
        '    %% 자동 생성일: %s\n'...
        '    %% 실제 데이터 분석 결과를 반영한 척도 매핑\n'...
        '    \n'...
        '    standardizedData = questionData;\n'...
        '    \n'...
        '    fprintf(''\\n=== 개선된 문항별 척도 표준화 ===\\n'');\n'...
        '    \n'], datestr(now));

    % 척도 매핑 테이블 추가
    fields = fieldnames(questionScales);
    functionCode = [functionCode, '    % 실제 데이터 분석 기반 척도 매핑\n'];
    functionCode = [functionCode, '    scaleMapping = containers.Map();\n'];

    for i = 1:length(fields)
        qName = fields{i};
        scales = questionScales.(qName);
        functionCode = [functionCode, sprintf('    scaleMapping(''%s'') = [%d, %d];\n', qName, scales(1), scales(2))];
    end

    % 함수 본문 추가
    functionCode = [functionCode, sprintf(['\n'...
        '    for i = 1:size(questionData, 2)\n'...
        '        questionName = questionNames{i};\n'...
        '        columnData = questionData(:, i);\n'...
        '        validData = columnData(~isnan(columnData));\n'...
        '        \n'...
        '        if isempty(validData)\n'...
        '            continue;\n'...
        '        end\n'...
        '        \n'...
        '        % 척도 정보 가져오기\n'...
        '        if isKey(scaleMapping, questionName)\n'...
        '            scaleInfo = scaleMapping(questionName);\n'...
        '            minScale = scaleInfo(1);\n'...
        '            maxScale = scaleInfo(2);\n'...
        '            fprintf(''%-6s: 사전정의 %%d~%%d점 척도 사용\\n'', questionName, minScale, maxScale);\n'...
        '        else\n'...
        '            % 자동 탐지 (새로운 문항인 경우)\n'...
        '            actualMin = min(validData);\n'...
        '            actualMax = max(validData);\n'...
        '            \n'...
        '            if all(mod(validData, 1) == 0) && length(unique(validData)) <= 10\n'...
        '                % 정수형 리커트 척도로 추정\n'...
        '                if actualMax <= 4 && actualMin >= 1\n'...
        '                    minScale = 1; maxScale = 4;\n'...
        '                elseif actualMax <= 5 && actualMin >= 1\n'...
        '                    minScale = 1; maxScale = 5;\n'...
        '                elseif actualMax <= 7 && actualMin >= 1\n'...
        '                    minScale = 1; maxScale = 7;\n'...
        '                elseif actualMax <= 10 && actualMin >= 1\n'...
        '                    minScale = 1; maxScale = 10;\n'...
        '                else\n'...
        '                    minScale = actualMin; maxScale = actualMax;\n'...
        '                end\n'...
        '                fprintf(''%-6s: 자동탐지 %%d~%%d점 척도\\n'', questionName, minScale, maxScale);\n'...
        '            else\n'...
        '                % 연속형 데이터\n'...
        '                minScale = actualMin; maxScale = actualMax;\n'...
        '                fprintf(''%-6s: 연속형 %%.2f~%%.2f 범위\\n'', questionName, minScale, maxScale);\n'...
        '            end\n'...
        '        end\n'...
        '        \n'...
        '        % Min-Max 표준화 적용\n'...
        '        if maxScale > minScale\n'...
        '            standardizedData(:, i) = (columnData - minScale) / (maxScale - minScale);\n'...
        '        else\n'...
        '            standardizedData(:, i) = 0.5 * ones(size(columnData));\n'...
        '            standardizedData(isnan(columnData), i) = NaN;\n'...
        '        end\n'...
        '        \n'...
        '        % 결과 검증\n'...
        '        normalizedVals = standardizedData(~isnan(standardizedData(:, i)), i);\n'...
        '        if ~isempty(normalizedVals)\n'...
        '            minNorm = min(normalizedVals);\n'...
        '            maxNorm = max(normalizedVals);\n'...
        '            if minNorm < -0.001 || maxNorm > 1.001\n'...
        '                fprintf(''  ❌ %%s: 표준화 오류 [%%.3f, %%.3f]\\n'', questionName, minNorm, maxNorm);\n'...
        '            else\n'...
        '                fprintf(''  ✓ %%s: 표준화 성공 [%%.3f, %%.3f]\\n'', questionName, minNorm, maxNorm);\n'...
        '            end\n'...
        '        end\n'...
        '    end\n'...
        '    \n'...
        '    fprintf(''✓ %%d개 문항 개선된 표준화 완료 ([0,1] 범위)\\n'', size(questionData, 2));\n'...
        'end\n'])];
end